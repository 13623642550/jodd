// Copyright (c) 2003-present, Jodd Team (http://jodd.org)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

plugins {
	id "org.jetbrains.kotlin.jvm" version "1.3.61"
}

allprojects {
	buildscript {
		repositories {
			mavenLocal()
			jcenter()
			mavenCentral()
		}
	}

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
	}
}

description = '''

	Jodd is an open-source Java utility library and set of micro frameworks.
	Jodd tools enriches JDK with many powerful and feature rich utilities.
	It helps with everyday task, makes code more robust and reliable.
	Jodd frameworks is set of lightweight application frameworks, compact yet powerful.
	Designed following the CoC, DRY and SCS principles, it makes development
	simple, but not simpler.
'''

// --- properties -------------------------------------------------------------

ext {
	isAdminRelease = project.hasProperty('JODD_ADMIN')

	// gradle

	gradleScriptDir = "${rootProject.projectDir}/gradle"

	// libraries

	kotlinVersion = '1.3.61'
	tomcatVersion = '8.0.47'
	jettyVersion = '9.3.25.v20180904'
	jmhVersion = '1.23'

	lib = [
		mail:			[
							'jakarta.mail:jakarta.mail-api:1.6.4',
							'com.sun.mail:jakarta.mail:1.6.4'
						],
		activation:		'javax.activation:javax.activation-api:1.2.0',
		servlet:		'javax.servlet:javax.servlet-api:3.1.0',
		jsp:			'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3',

		log_slf4j:			 'org.slf4j:slf4j-api:[1.7,1.8)',
		log_slf4j_simple:	 'org.slf4j:slf4j-simple:[1.7,1.8)',
		log_logback_core: 	 'ch.qos.logback:logback-core:[1.2,1.3)',
		log_logback_classic: 'ch.qos.logback:logback-classic:[1.2,1.3)',
		log_jcl:        	 'commons-logging:commons-logging:[1.2,1.3)',
		log_log4j2:		     'org.apache.logging.log4j:log4j-api:[2.8,2.9)',
		log_log4j2_core:     'org.apache.logging.log4j:log4j-core:[2.8,2.9)',

		junit5:			'org.junit.jupiter:junit-jupiter-engine:5.5.2',
		junit5_api:		'org.junit.jupiter:junit-jupiter-api:5.5.2',
		junit5_params:	'org.junit.jupiter:junit-jupiter-params:5.5.2',
		junit5_console: 'org.junit.platform:junit-platform-console:1.5.1',
		mockito:		'org.mockito:mockito-core:3.1.0',
		hsqldb:			'org.hsqldb:hsqldb:2.5.0',
		h2db:			'com.h2database:h2:1.4.200',
		postgresql:		'org.postgresql:postgresql:9.4-1201-jdbc41',
		mysql:			'mysql:mysql-connector-java:8.0.12',
		mssql:			'com.microsoft.sqlserver:mssql-jdbc:6.2.2.jre8',
		winstone:		'net.sourceforge.winstone:winstone:0.9.10',
		greenmail:		'com.icegreen:greenmail:1.5.11',

		el_api:			"org.apache.tomcat:tomcat-jasper:${tomcatVersion}",
		server_tomcat:	"org.apache.tomcat:tomcat-catalina:${tomcatVersion}",
		tomcat_embed:	[
							"org.apache.tomcat:tomcat-jasper:${tomcatVersion}",
							"org.apache.tomcat:tomcat-jasper-el:${tomcatVersion}",
							"org.apache.tomcat:tomcat-catalina:${tomcatVersion}",
							"org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
							"org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
							"org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
							"org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}"
						],
		jetty_embed:	[
		        			"org.eclipse.jetty:jetty-server:${jettyVersion}",
							"org.eclipse.jetty:jetty-webapp:${jettyVersion}",
							"org.eclipse.jetty:jetty-jsp:9.2.26.v20180806"
						],
		mockserver:		'org.mock-server:mockserver-netty:5.2.3',
	]

	commonManifest = [
		'Debug-Info' : 'on',
		'Built-By' : 'jodd.org',
		'Bundle-License' : 'https://jodd.org/license.html',
		'Bundle-Vendor' : 'Oblac',
		'Bundle-DocURL' : 'https://jodd.org',
		'Implementation-Vendor': 'Jodd Team'
	]
}

// --- configuration ----------------------------------------------------------

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply from: "${gradleScriptDir}/provided.gradle"
	apply from: "${gradleScriptDir}/publish-maven.gradle"

	group = 'org.jodd'

	if (JavaVersion.current() < JavaVersion.VERSION_1_8) {
		throw new GradleException("This build must be run with at least Java 8.")
	}

	// *** COMPILE ***

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		withJavadocJar()
		withSourcesJar()
	}

	compileJava {
		options.encoding = 'UTF-8'
		options.compilerArgs << "-Xlint:-options"
//		options.compilerArgs << "-Xlint:unchecked"
		options.compilerArgs << "-Xlint:deprecation"
		options.incremental = true
		options.fork = true
		options.debug = true
	}

	javadoc {
		options.addStringOption('Xdoclint:none', '-quiet')
	}

	// integration tests + performances

	sourceSets {
		jmh {
			compileClasspath += sourceSets.test.runtimeClasspath
			runtimeClasspath += sourceSets.test.runtimeClasspath
		}
		testInt {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
			}
		}
	}

	configurations {
		testIntCompile.extendsFrom testCompile
		testIntRuntime.extendsFrom testRuntime
	}

	// *** LICENSE ***

	task copyLicense(type: Copy) {
		from file("$rootProject.projectDir/LICENSE")
		into file("$projectDir/src/main/resources/META-INF/")
	}

	jar {
		dependsOn copyLicense
	}


	// *** JMH ***

	dependencies {
		jmhImplementation project
		jmhImplementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
		jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
	}

	task jmh(type:JavaExec, dependsOn: compileJava) {
		group 'Verification'
		description 'Execute JMH benchmarks.'

		main 'org.openjdk.jmh.Main'
		classpath = sourceSets["jmh"].runtimeClasspath
		// args(listOf("-h"))
	}

	tasks.addRule("Pattern: <ClassName>Benchmark : Run benchmark.") { String className ->
		if (className.endsWith("Benchmark")) {
			println "\nRunning Benchmark: " + className + "\n"

			task "$className"(type: JavaExec, dependsOn: 'build') {
				main 'org.openjdk.jmh.Main'
				args =  ['.' + className + '.*']
//				jvmArgs = ["-XX:+PrintCompilation"]
				classpath = sourceSets.main.runtimeClasspath + sourceSets.jmh.runtimeClasspath
			}
		}
	}

	// *** TEST ***

	test {
		useJUnitPlatform()
	}

	task testIntegration(type: Test) {
		useJUnitPlatform()
	}


	// *** JACOCO ***

	jacocoTestReport {
		def excludes = ['*Test*', '*.?', '*Foo*', 'jodd.asm6.*', '*.fixtures.*', '*.JavaBridge']
		afterEvaluate {
			test.extensions.getByName("jacoco").excludes = excludes
			testIntegration.extensions.getByName("jacoco").excludes = excludes
		}
		reports {
			xml.enabled true
			html.enabled true
			csv.enabled = false
		}
	}

	task codeCoverage(type: JacocoReport) {
		group 'Verification'
		description 'Generates code coverage reports for a single module'

		executionData fileTree("${buildDir}/jacoco/").include("*.exec")
		//sourceSets sourceSets.main
		sourceDirectories.from = files(sourceSets.main.java.srcDirs)
		classDirectories.from = files(sourceSets.main.output.classesDirs)

		reports {
			html.enabled true
			html.destination file("${buildDir}/reports/jacoco")
		}
	}

	codeCoverage.dependsOn test
	codeCoverage.dependsOn testIntegration


	// *** ARTIFACTS ***

	artifacts {
		archives jar
		archives sourcesJar
		archives javadocJar
	}

	jar {
		afterEvaluate {
			manifest.attributes << commonManifest
			manifest {
				attributes 'Implementation-Title': project.name
				attributes 'Implementation-Version': project.version
			}
		}
	}

	javadoc {
		exclude '**/asm6/**'
		afterEvaluate {
			configure(options) {
				windowTitle 'Jodd Documentation'
				docTitle "$project.name $project.version Documentation"
				bottom = 'Copyright &#169; 2003-present <a href="http://jodd.org">Jodd Team</a>'
				breakIterator = true
				author = false
				encoding = 'UTF-8'
				docEncoding = 'UTF-8'
				stylesheetFile = file('src/main/javadoc/jodd.css')
				source = '1.8'
				failOnError = false
			}
		}
	}
}

// --- project ----------------------------------------------------------------

apply from: "${gradleScriptDir}/license.gradle"


// --- wrapper ----------------------------------------------------------------

wrapper {
	gradleVersion = '6.1.1'
}
